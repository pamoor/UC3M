{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM ",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\n#\n# WepSIM (https://wepsim.github.io/wepsim/)\n#\n\n\nla R1 U32 {\n\tco=010001\n  nwords=2\n\tR1=reg(25,21)\n\tU32=inm(63,32) {\n  # MAR <- PC\n    (C0, T2)\n  # MBR <- memory[MAR]  \n  \t(R, BW=11, M1, C1, TA, \n  # PC <- PC + 4\n     M2, C2)\n \t# R1 <- MBR\n\t  (SelC=10101, LC, T1,\n  # Salto a fetch\n     A0=1, B=1, C=0)\n  \t\n  \n  }}\n    \n  \n\t\n\nsc R1 R2 (R3)     { \n  co=010010\n  nwords=1\n  R1=reg(25,21)\n  R2=reg(20,16)\n  R3=reg(15,11) {\n\n\t# MAR <- R3\n\t\t(MR=0, SelA=1011, T9, C0)\n\t# MBR <- R1\n\t\t(MR=0, SelA=10101, T9, C1)\n\t# memory[MAR] <- MBR\n\t\t(TA, TD, W, BW=11) \n\t# MAR <- R3 + 4\n\t\t(MB=10, MC=1, selCOP=1010, T6, C0, SelA=1011)\n\t# MBR <- R2\n\t\t(MR=0, SelB=10000, T10, C1)\n\t# memory[MAR] <- MBR\n\t\t(TA, TD, W, BW=11, \n\t# salto a fetch\n\t\t A0=1, B=1, C=0)\n   \n\t\t\t\t}}\n  \nlc R1 R2 (R3)     { \n  co=010011\n  nwords=1\n  R1=reg(25,21)\n  R2=reg(20,16)\n  R3=reg(15,11) {\n\n\t# MAR <- R3\n\t\t(MR=0, SelA=1011, T9, C0)\n\t# MBR <-memory[MAR]\n\t\t(TA, R, BW=11, M1, C1)\n\t# R1 <- MBR\n\t\t(T1, LC, SelC= 10101) \n\t# MAR <- R3 + 4\n\t\t(MB=10, MC=1, selCOP=1010, T6, C0, SelA=1011)\n\t# MBR <- memory[MAR]\n\t\t(TA, R, BW=11, M1, C1)\n\t#\tR1 <- MBR\n\t\t(T1, LC, SelC= 10000,\n\t# salto a fetch\n\t\t A0=1, B=1, C=0)\n   \n\t\t\t\t}}\n\n  \naddc R1 R2 R3 R4 {\n\tco=010100\n  nwords=1\n  R1=reg(25,21)\n  R2=reg(20,16)\n  R3=reg(15,11)\n  R4=reg(10,6)\n  {\n  # R1 <- R1 + R3, actualizo SR\n  \t(SelA=10101, SelB=1011, MC=1, SelCop=1010, T6, SelC=10101, LC, SelP=11, M7, C7)\n   \n  # R2 <- R2 + R4\n\t\t(SelA=10000, SelB=110, MC=1, SelCop=1010, T6, SelC=10000, LC, \n   \n  # Salto a fetch\n\t\t A0=1, B=1, C=0)\n  \n  }}\n  \nmulc R1, R2, R3, R4 {\n   co=010101\n   nwords=1\n   R1=reg(25,21)\n   R2=reg(20,16)\n   R3=reg(15,11)\n   R4=reg(10,6) {\n     \n   # RT1 <- R1 * R3\n     (selA=10101, selB=1011, MA=0, MB=00, selCop=01100, MC=1, T6=1, C4=1)\n   # RT2 <- R2 * R4\n     (selA=10000, selB=110, MA=0, MB=00, selCop=01100, MC=1, T6=1, C5=1)\n   # RT3 <- RT1 - RT2 actualizo sr\n     (selCop=01011, MC, MA, MB=01,SelP=11, M7, C7, C6)\n\n   # RT1 <- R1 * R4\n     (selA=10101, selB=110, MA=0, MB=00, selCop=01100, MC=1, T6=1, C4=1)\n   # RT2 <- R2 * R3\n     (selA=10000, selB=1011, MA=0, MB=00, selCop=01100, MC=1, T6=1, C5=1)\n   # R2 <- RT1 - RT2 \n     (selC=10000, LC, selCop=01011, MC, T6, MA, MB=01)\n\t # R1 <- RT3\n  \t (T7, SelC=10101, LC,\n   # salto a fetch\n       A0=1, B=1, C=0)\n   }}\n  \n  beqc R1, R2, \n \t\t R3, R4, S6 {\n   co=110100\n   nwords=1,\n   R1=reg(25,21)\n   R2=reg(20,16)\n   R3=reg(15,11)\n   R4=reg(10,6)\n   S6=inm(5,0)\n   {\n     # MBR <- SR (para no actualizar)\n     (T8,C1),\n     #R1 - R3\n     (SelA=10101, SelB=1011, SelCop=01011, MC, SelP=11, M7=1, C7)\n     # IF SR.Z != 0, jump to beq2\n     (A0=0, B=1, C=110, MADDR=beq2),\n     #R2 - R4\n     (SelA=10000, SelB=110, SelCop=01011, MC, SelP=11, M7, C7)\n     # IF SR.Z != 0, jump to beq2\n     (A0=0, B=1, C=110, MADDR=beq2),\n      #RT1 <- PC\n      (T2, C4),\n      #RT2 <-S6\n      (SE=1, Offset=0, Size=110,T3,C5)\n      #PC <-PC + S6\n      (MA, MB=01, SelCop=1010, MC, T6, C2)\nbeq2: #SR <- MBR\n      (T1, C7,\n      # Salto a fetch\n       A0=1, B=1, C=0)\n     }}\n      \ncall U20 {\n  co=100001\n  nwords=1\n  U20=inm(19,0) {\n    # ra(x1) <- PC\n  \t\t(LC, SelC=1, MR, T2)\n    # PC <- U20\n  \t\t(SIZE=10100, OFFSET=0, SE=0, T3, C2,\n    # Salto a fetch\n       A0=1, B=1, C=0)\n}}\n  \nret {\n  co=100010\n  nwords=1 {\n  # PC <- ra(x1)\n    (SelA=1, MR=1, T9, C2,\n  # Salto a fetch\n     A0=1, B=1, C=0)\n  }}\n    \nhcf {\n  co=100011\n  nwords=1 {\n  # PC <- x0\n    (SelA=0, MR, T9, C2)\n  # SR <- x0\n    (SelA=0, MR, T9, C7,\n  # Salto a fetch\n     A0=1, B=1, C=0)\n}}\n  \n\n\n",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\n  \n  \n\n  \n  \n  \n  \n",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1700820761213,\n  \"title\": \"clock 1 @ &#181;address 0\",\n  \"title_short\": \"clock 1,<br>&#181;add 0\",\n  \"content\": \"register R2 = 0x100000; register PC = 0x8000; memory 0x1000 = 0x7; memory 0x1004 = 0x9; memory 0x8000 = 0x44a00000; memory 0x8004 = 0x7; memory 0x8008 = 0x44c00000; memory 0x800c = 0x8; memory 0x8010 = 0x44e00000; memory 0x8014 = 0x7; memory 0x8018 = 0x47800000; memory 0x801c = 0x8; memory 0x8020 = 0xd0a63f08; memory 0x8024 = 0x44a00000; memory 0x8028 = 0x1101; memory 0x802c = 0x50a63f00; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "24/11/2023, 11:12:35",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}